name: Commit CI

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
    tags:
      - '![0-9]+.*'
    paths:
      - '**/**'
      - '!*.md'
      - '!.gitignore'
  pull_request:

jobs:
  checklibrime:
    runs-on: windows-2022
    outputs: 
      buildlibrime: ${{steps.buildlibrime.outputs.bulidrime}}
      librimesha: ${{steps.getlastsha.outputs.librimesha}}
    steps:
      - name: Get Last commit sha
        id: getlastsha
        run: |
          $commit = git ls-remote https://github.com/rime/librime/ master
          $commitParts = $commit -split '\s+'
          $commitsha = $commitParts[0]
          "commitsha=$commitsha" |  Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $bulidrime = "0"
          echo "librime commit SHA: $commitsha"
          echo "librimesha=$commitsha" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          
      - name: Create cache
        id: buildflag
        uses: actions/cache@v3
        with:
          path: ${{ runner.workspace }}  # 缓存整个工作目录
          key: buildflag-${{env.commitsha}}  # 使用 commit SHA 作为缓存的 key
          
      - name: Create out.txt with commit SHA
        id: buildlibrime
        if: steps.buildflag.outputs.cache-hit != 'true' 
        #continue-on-error: true
        run: |
          $bulidrime = "1"
          echo "bulidrime=$bulidrime" |  Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          #exit 1

  Build-librime:
    if: always() && (needs.checklibrime.outputs.buildlibrime == '1')
    needs: checklibrime
    uses: rime/librime/.github/workflows/windows-build.yml@master
    with:
      repository: rime/librime
      rime_plugins: rime/librime-charcode hchunhui/librime-lua lotem/librime-octagram

  build:
    runs-on: windows-2022
    if: ${{ always() }}
    needs: [checklibrime, Build-librime]
    env:
      boost_version: 1.78.0
      BOOST_ROOT: ${{ github.workspace }}\deps\boost_1_78_0
    steps:
      - name: Checkout last commit
        uses: actions/checkout@v3
        with:
          submodules: true
          
      - name: Cache lirime artifacts
        id: cache-artifact
        uses: actions/cache@v3
        with:
          path: |
            artifact
          key: librime-artifact-commit-${{ env.commitsha }}
          
      - name: Download artifacts
        if: steps.cache-artifact.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v3

      - name: Configure build environment
        run: |
          copy env.vs2022.bat env.bat
          $git_ref_name = git describe --always
          echo "git_ref_name=$git_ref_name" >> $env:GITHUB_ENV

      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.BOOST_ROOT }}
          key: ${{ runner.os }}-boost-${{ env.boost_version }}

      - name: Install Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: .\install_boost.bat

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1.3

      - name: Copy Rime files
        run: | #.\github.install.bat
          $msvc = Get-ChildItem -Filter "*msvc.7z" -Path .\artifact\
          $msvc | foreach {7z x $_.FullName -olibrime -y}
          # 复制 rime 头文件到 include 文件夹
          Copy-Item -Path "librime\dist\include\rime_*.h" -Destination "include\" -Force
          # 复制 rime.lib 和 rime.dll 到 lib 文件夹
          Copy-Item -Path "librime\dist\lib\rime.lib" -Destination "lib\" -Force
          Copy-Item -Path "librime\dist\lib\rime.dll" -Destination "output\" -Force
          # 创建 output\data\opencc 文件夹（如果不存在）
          if (!(Test-Path -Path "output\data\opencc" -PathType Container)) {
          New-Item -Path "output\data\opencc" -ItemType Directory
          }
          # 复制 opencc 文件到 output\data\opencc 文件夹
          Copy-Item -Path "librime\share\opencc\*.*" -Destination "output\data\opencc\" -Force
      - name: Build Weasel
        id: build_weasel
        run: |
          .\build.bat data
          .\build.bat hant
          .\build.bat installer
        
      - name: Compress Debug Symbols
        shell: pwsh
        run: |
          Compress-Archive -Path output\*.pdb -CompressionLevel Optimal -DestinationPath .\output\archives\symbols.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          path: |
            .\output\archives\weasel*.exe
            .\output\archives\symbols.zip
