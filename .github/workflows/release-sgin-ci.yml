name: Release Sgin CI

on:
  workflow_dispatch:

jobs:
  checklibrime:
    runs-on: windows-2022
    outputs: 
      buildlibrime: ${{steps.buildlibrime.outputs.bulidrime}}
      librimesha: ${{steps.getlastsha.outputs.librimesha}}
    steps:
      - name: Get Last commit sha
        id: getlastsha
        run: |
          $commit = git ls-remote https://github.com/rime/librime/ master
          $commitParts = $commit -split '\s+'
          $commitsha = $commitParts[0]
          "commitsha=$commitsha" |  Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $bulidrime = "0"
          echo "librime commit SHA: $commitsha"
          echo "librimesha=$commitsha" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          
      - name: Create cache
        id: buildflag
        uses: actions/cache@v4
        with:
          path: ${{ runner.workspace }}  # 缓存整个工作目录
          key: buildflag-${{env.commitsha}}  # 使用 commit SHA 作为缓存的 key
          
      - name: Create out.txt with commit SHA
        id: buildlibrime
        if: steps.buildflag.outputs.cache-hit != 'true' 
        #continue-on-error: true
        run: |
          $bulidrime = "1"
          echo "bulidrime=$bulidrime" |  Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          #exit 1

  librime:
    if: always() && (needs.checklibrime.outputs.buildlibrime == '1')
    needs: checklibrime
    uses: rime/librime/.github/workflows/windows-build.yml@master
    with:
      repository: rime/librime
      rime_plugins:   hchunhui/librime-lua lotem/librime-octagram rime/librime-predict
      
  build-and-release:
    permissions:
      contents: write
    runs-on: windows-2022
    if: ${{ always() }}
    needs: [checklibrime, librime]
    env:
      boost_version: 1.83.0
      BOOST_ROOT: ${{ github.workspace }}\deps\boost_1_84_0
      RIME_PLUGINS:  hchunhui/librime-lua lotem/librime-octagram rime/librime-predict
      commitsha: ${{ needs.checklibrime.outputs.librimesha }}
    steps:

      - name: Checkout last commit
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Fetch submodule 
        run: git submodule update --init --recursive
          
      - name: Cache lirime artifacts
        id: cache-artifact
        uses: actions/cache@v4
        with:
          path: |
            artifact
          key: librime-artifact-${{ env.commitsha }}
          
      - name: Download artifacts
        if: steps.cache-artifact.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v3
        
      - name: Configure build environment
        run: |
          copy env.vs2022.bat env.bat
          $git_ref_name = git describe --always
          echo "git_ref_name=$git_ref_name" >> $env:GITHUB_ENV
          copy librime\env.vs2022.bat librime\env.bat
          $file = "librime\env.bat"
          $lines = Get-Content -Path $file
          $lines = $lines | Where-Object { $_ -notlike "*set ARCH=Win32*" }
          Set-Content -Path $file -Value $lines

      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BOOST_ROOT }}
          key: ${{ runner.os }}-boost-${{ env.boost_version }}

      - name: Install Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        #run: .\install_boost.bat
        run: |
          aria2c https://downloads.sourceforge.net/project/boost/boost-binaries/1.84.0/boost_1_84_0-msvc-14.3-64.exe
          aria2c https://downloads.sourceforge.net/project/boost/boost-binaries/1.84.0/boost_1_84_0-msvc-14.3-32.exe
          .\boost_1_84_0-msvc-14.3-32.exe /dir=$env:BOOST_ROOT /silent
          Wait-Process -Name boost_1_84_0-msvc-14.3-32
          .\boost_1_84_0-msvc-14.3-64.exe /dir=$env:BOOST_ROOT /silent
          Wait-Process -Name boost_1_84_0-msvc-14.3-64
          Copy-Item $env:BOOST_ROOT\lib32-msvc-14.3\* $env:BOOST_ROOT\stage\lib -Force -Recurse
          Copy-Item $env:BOOST_ROOT\lib64-msvc-14.3\* $env:BOOST_ROOT\stage\lib -Force -Recurse
          Remove-Item $env:BOOST_ROOT\lib32-msvc-14.3\ -Force -Recurse
          Remove-Item $env:BOOST_ROOT\lib64-msvc-14.3\ -Force -Recurse


      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
        
#      - name: setup python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.11'
          

      - name: Copy Rime files
        continue-on-error: true
      #  run: .\github.install.bat
        run: |
          $msvc = Get-ChildItem -Filter "*Windows-clang.7z" -Path .\artifact\
          $msvc | foreach {7z x $_.FullName -olibrime -y}
          # 复制 rime 头文件到 include 文件夹
          Copy-Item -Path "librime\dist\include\rime_*.h" -Destination "include\" -Force
          # 复制 rime.lib 和 rime.dll 到 lib 文件夹
          Copy-Item -Path "librime\dist\lib\rime.lib" -Destination "lib\" -Force
          #Copy-Item -Path "librime\lib\glog.lib" -Destination "lib\" -Force
          Copy-Item -Path "librime\dist\lib\rime.dll" -Destination "output\" -Force
          # 创建 output\data\opencc 文件夹（如果不存在）
          if (!(Test-Path -Path "output\data\opencc" -PathType Container)) {
          New-Item -Path "output\data\opencc" -ItemType Directory
          }
          # 复制 opencc 文件到 output\data\opencc 文件夹
          Copy-Item -Path "librime\share\opencc\*.*" -Destination "output\data\opencc\" -Force
          
          # 设置源文件路径
          $sourceFilePath = "include\rime_api.h"

          # 读取源文件内容
          $fileContent = Get-Content $sourceFilePath

          # 执行替换操作
          $newContent = $fileContent -replace 'typedef uintptr_t RimeSessionId;', 'using RimeSessionId = uint64_t;'
          # 在指定行后添加新行
          $newContent = $newContent -replace 'Bool is_ascii_punct;', ('Bool is_ascii_punct;' + "`r`n  Bool is_s2t;`r`n  Bool is_predictable;")
          # 将新内容写回源文件
          Set-Content -Path $sourceFilePath -Value $newContent

          Write-Host "替换完成。"

      - name: Build Weasel
        id: build_weasel
        continue-on-error: true
        run: |
          .\build.bat data
          .\build.bat hant
          .\build.bat installer
          
      - name: Sgin Bin
        shell: pwsh
        env:
          env_certificate: ${{ secrets.CERTIFICATE }}
          env_certpassword: ${{ secrets.PASSWORD }}
          env_catert: '${{ secrets.CACERT }}'
        run: |
          $tempCertFile = New-TemporaryFile
          $tempCAFile = New-TemporaryFile        

          # Retrieve environment variables for cert/password.
          $certText = $env:env_certificate
          $CertPass = ($env:env_certpassword).ToString()
          $CACertText = $env:env_catert

          $SecPass =ConvertTo-SecureString -String $CertPass -AsPlainText -force

          # Create a Cert object by converting the cert string to bytes.

          $certBytes = [Convert]::FromBase64String($certText)
          $CAcertBytes = [Convert]::FromBase64String($CACertText)

          Set-Content -Path $tempCertFile -Value $certBytes -AsByteStream
          Set-Content -Path $tempCAFile -Value $CAcertBytes -AsByteStream

          #Import-Certificate -FilePath $tempCAFile  -CertStoreLocation Cert:\CurrentUser\Root\ -Confirm:$false
          certutil.exe -addstore root $tempCAFile.FullName

          $cert=Get-PfxCertificate -FilePath $tempCertFile -Password $SecPass

          # Go through the artifacts directory and sign the 'windows' artifacts.
          $output = ".\output"

          $Extension = @(".exe",".dll",".ime")
          Get-ChildItem -Path $output |  where {$Extension -contains $_.Extension} | Set-AuthenticodeSignature -Certificate $Cert -TimestampServer http://timestamp.digicert.com
          Remove-Item $tempCAFile -Force
          Remove-Item $tempCertFile -Force
          
        
      - name: Compress Debug Symbols
        shell: pwsh
        run: |
          Compress-Archive -Path output\*.pdb -CompressionLevel Optimal -DestinationPath .\output\archives\symbols.zip
      
      - name: Upload artifacts bin
        uses: actions/upload-artifact@v4
        with:
          name: weasel
          if-no-files-found: error
          path: |
            .\output\*.exe
            .\output\*.dll
            .\output\*.ime
            
      - name: build_weasel_installer
        id: build_weasel_installer
        continue-on-error: true
        run: |
          #.\build.bat data
          #.\build.bat hant
          #.\build.bat installer
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: weasel_installer
          if-no-files-found: error
          path: |
            .\output\archives\weasel*.exe
            .\output\archives\symbols.zip
